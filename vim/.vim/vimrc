" Base settings {{{
" Sensible defaults {{{
if &compatible
  set nocompatible
endif

syntax enable
filetype plugin indent on

" From sensible.vim by tpope {{{
set backspace=indent,eol,start
set ruler " See coordinates
set listchars=tab:>\ ,trail:-,extends:→,precedes:←,nbsp:+
set autoread


" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^Eterm'
	set t_Co=16
endif
"}}}

let mapleader=" "
nmap Y y$
imap <C-c> <Esc> 
" <C-c> is not detected by InsertLeave

set suffixes+=.aux,.bbl,.blg,.brf,.cb,.dvi,.idx,.ilg,.ind,.inx,.jpg,.log,.out,.png,.toc
set suffixes-=.h,.class
set suffixes-=.obj
"}}}
" Move temporary files to a secure location to protect against CVE-2017-1000382 {{{
if exists('$XDG_CACHE_HOME')
  let &g:directory=$XDG_CACHE_HOME
else
  let &g:directory=$HOME . '/.cache'
endif
let &g:undodir=&g:directory . '/vim/undo//'
let &g:backupdir=&g:directory . '/vim/backup//'
let &g:directory.='/vim/swap//'
"}}}
" Create directories if they doesn't exist {{{
if ! isdirectory(expand(&g:directory))
  silent! call mkdir(expand(&g:directory), 'p', 0700)
endif
if ! isdirectory(expand(&g:backupdir))
  silent! call mkdir(expand(&g:backupdir), 'p', 0700)
endif
if ! isdirectory(expand(&g:undodir))
  silent! call mkdir(expand(&g:undodir), 'p', 0700)
endif
"}}}
"}}}
" Specific settings {{{
" Plugins {{{
" vim-plug {{{
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
	  \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'	"Enable better multi file switching
	Plug 'junegunn/goyo.vim'

	Plug 'tpope/vim-commentary'
	Plug 'tpope/vim-surround'
Plug 'tpope/vim-vinegar'
	Plug 'tpope/vim-fugitive'			"https://www.youtube.com/watch?v=PO6DxfGPQvw and https://www.youtube.com/watch?v=73RulF4Md4Q TODO

	Plug 'flazz/vim-colorschemes'
	Plug 'folke/tokyonight.nvim'
	Plug 'protesilaos/tempus-themes-vim'
	Plug 'jtadley/vim-qasm'

	Plug 'lambdalisue/nerdfont.vim'
	Plug 'lambdalisue/fern.vim'
	Plug 'lambdalisue/fern-hijack.vim'
	Plug 'lambdalisue/fern-renderer-nerdfont.vim'
	Plug 'yuki-yano/fern-preview.vim'

" Plug 'sheerun/vim-polyglot'
	Plug 'bhurlow/vim-parinfer'
	Plug 'elkowar/yuck.vim'
	Plug 'JuliaEditorSupport/julia-vim'
	Plug 'tomlion/vim-solidity'
	Plug 'leafo/moonscript-vim'
	Plug 'plasticboy/vim-markdown', { 'for' : ['markdown']}
	Plug 'neovimhaskell/haskell-vim', { 'for': ['haskell']}
	Plug 'evanleck/vim-svelte'

Plug 'itchyny/lightline.vim'
Plug 'markonm/traces.vim'
"Plug 'dense-analysis/ale'			"https://github.com/dense-analysis/ale/wiki/Java
"Plug 'junegunn/goyo.vim'
Plug 'lervag/vimtex' ", {'do': 'notify-send \"Dependencies\" \"Install latexmk\"',}
Plug 'sirver/ultisnips'				"https://castel.dev/post/lecture-notes-1/
"Plug 'vim/killersheep'
"Plug 'ycm-core/YouCompleteMe'
Plug 'ap/vim-css-color'
Plug 'mattn/emmet-vim', { 'for': ['js','jsx','ts','tsx','html']}
"Plug 'leafgarland/typescript-vim'
"Plug 'HerringtonDarkholme/yats.vim'
" Plug 'scrooloose/vim-slumlord'
" Plug 'aklt/plantuml-syntax'
Plug 'davisdude/vim-love-docs', {'do': './gen.sh'}
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() }, 'for': ['markdown', 'vim-plug']}
Plug 'Twinside/vim-haskellConceal', {'for': ['haskell']}
Plug 'psliwka/vim-smoothie'
Plug 'christoomey/vim-tmux-navigator'
call plug#end()
"}}}
" Plugin settings {{{
" fzf {{{
let g:fzf_colors =
	\ { 'fg':      ['fg', 'Normal'],
	  \ 'bg':      ['bg', 'Normal'],
	  \ 'hl':      ['fg', 'Comment'],
	  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
	  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
	  \ 'hl+':     ['fg', 'Statement'],
	  \ 'info':    ['fg', 'PreProc'],
	  \ 'border':  ['fg', 'Ignore'],
	  \ 'prompt':  ['fg', 'Conditional'],
	  \ 'pointer': ['fg', 'Exception'],
	  \ 'marker':  ['fg', 'Keyword'],
	  \ 'spinner': ['fg', 'Label'],
	  \ 'header':  ['fg', 'Comment'] } " Integrate fzf with current colorscheme
"}}}
" ale {{{
let g:ale_linters = {
	  \  'cs':['syntax', 'semantic', 'issues'],
	  \  'python': ['pylint'],
	  \  'java': ['eclipselsp'],
	  \ }
" \  'java' : ['eslint'],
let g:ale_fixers = [
	  \  'google_java_format',
	  \  'astyle',
	  \ ]
"}}}
" ultisnips {{{
" let g:UltiSnipsExpandTrigger='<tab>'
" let g:UltiSnipsJumpForwardTrigger='<tab>'
" let g:UltiSnipsJumpBackwardTrigger='<s-tab>'
let g:UltiSnipsEditSplit="horizontal"
"}}}
" vimtex {{{
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'
"let g:livepreview_previewer = "zathura"
"}}}
" netrw (file explorer in vim) {{{
let g:netrw_liststyle = 3
"}}}
" lightline {{{
set noshowmode "showmode substituted by lightline.vim
let g:lightline = {
			\ 'colorscheme': 'ayu_mirage'
			\}
"}}}
" vim-love-docs{{{
let g:lovedocs_colors = 'guifg=#E2BE6E ctermfg=159' "https://jonasjacek.github.io/colors/
"}}}
" vim-markdown {{{
" native plugin {{{
" let g:markdown_fenced_languages = [ 'cpp', 'python', 'r', 'lua']
let g:markdown_fenced_languages = [ 'cpp', 'python', 'r', 'lua', 'java', 'javascript', 'html', 'css', 'haskell']
"}}}
" plasticboy's version {{{
let g:vim_markdown_math = 1
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_folding_disabled = 1
"}}}
"}}}
" markdown-preview {{{
function! g:OpenURL(url)
	echo a:url
	execute 'silent' '!/usr/bin/flatpak run --branch=stable --arch=x86_64 --command=epiphany org.gnome.Epiphany' shellescape(a:url) '&'
endfunction
let g:mkdp_browserfunc = 'OpenURL'
" }}}
" vim-tmux-navigator {{{
let g:tmux_navigator_no_mappings = 1

function! SetNavigationWithinTMUX()
	nnoremap <silent> <A-h> <Cmd>TmuxNavigateLeft<cr>
	nnoremap <silent> <A-j> <Cmd>TmuxNavigateDown<cr>
	nnoremap <silent> <A-k> <Cmd>TmuxNavigateUp<cr>
	nnoremap <silent> <A-l> <Cmd>TmuxNavigateRight<cr>
endfunction
" }}}
" parinfer {{{
  let g:vim_parinfer_globs = ['*.lisp','yuck']
  let g:vim_parinfer_filetypes = ['lisp','yuck']
" }}}
" fern.vim {{{
let g:fern#renderer = 'nerdfont'
function! s:fern_settings() abort
  nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
  nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
  nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
  nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
  nmap <silent> <buffer> - <Plug>(fern-action-leave)
  nmap <silent> <buffer> + <Plug>(fern-action-mark)
endfunction

augroup fern-settings
  autocmd!
  autocmd FileType fern call s:fern_settings()
augroup END
" }}}
"}}}
"}}}
" Settings {{{
" Interface{{{
colorscheme ayu
" Other cool colorschemes {{{
" Dark {{{
" colorscheme sky " Weirdly works best after dark background
" colorscheme ayu
" colorscheme jellyx
" colorscheme benokai
" }}}
" White {{{
" colorscheme macvim-light
" colorscheme github
" }}}
" }}}
" set number relativenumber "set hybrid numbers
set laststatus=2 "status bar is shown even when in only one buffer
set noerrorbells "disable beep on errors
set wildmenu "display command line's tab complete options as menu
set incsearch "search the word as its written
set hlsearch "highlight the words matched by pattern
set termguicolors "enables true color in terminal. Uses cterm values
set fillchars=eob:\ ,fold:\ 
"}}}
" Behaviour {{{
set encoding=utf-8 "use encoding that supports unicode
set ignorecase "ignore case when searching
set smartcase "not ignore case if typing in capital case
set undodir=$HOME/.vim/undodir "tell vim where to store undo history
set undofile "mantain undo history between sessions (In undodir ↑)
set updatetime=750
set tabstop=4
set shiftwidth=4
set modeline "check last line of a file for extra settings
set makeprg=make\ \-s
set splitbelow "better window splitting
set splitright "better window splitting
set smarttab
set nrformats-=octal
set mouse=a "enable mouse
set completeopt=menu,menuone,noselect "list of options for completion
set hidden "hide unused buffers instead of unloading them (Permits buffer switching without saving)
set wildignore+=.gitkeep,node_modules/**
set autochdir
" autocmd BufEnter * silent! lcd %:p:h
"}}}
"}}}
" Mappings {{{
" Set normal mode mappings
nnoremap <Leader>w <Cmd>w<CR>
nnoremap <Leader>q <Cmd>qall<CR>
nnoremap <Leader>! <Cmd>q!<CR>
" nnoremap <leader>H :set rnu! nu!<CR>
nnoremap <leader>s <Cmd>set spell!<CR>
nnoremap <leader>t <Cmd>term<CR><C-W>J<C-W>5_ python && exit<CR><C-L>
nnoremap <leader>ue <Cmd>UltiSnipsEdit<CR>
nnoremap <silent> ñ <Cmd>silent !xdg-open <cWORD><CR>

" Diffing mappings
nnoremap <leader>dt <Cmd>diffthis<CR>
nnoremap <leader>do <Cmd>diffoff<CR>

" Quicklist mappings
nnoremap <leader>qo <Cmd>copen<CR>
nnoremap <leader>qc <Cmd>cclose<CR>
nnoremap <leader>qn <Cmd>cnext<CR>
nnoremap <leader>qN <Cmd>cprev<CR>

" Locallist mappings
nnoremap <leader>lo <Cmd>lopen<CR>
nnoremap <leader>lc <Cmd>lclose<CR>
nnoremap <leader>ln <Cmd>cnext<CR>
nnoremap <leader>lN <Cmd>cprev<CR>

nnoremap <silent> <C-l> <Cmd>silent nohlsearch<CR><C-l>
"  Practical Vim's ↑ (Tip 81)
	"nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
"  tpope's ↑

" Use <C-space> for omnifunc in insert mode
inoremap <C-space> <C-x><C-o>
inoremap <C-l> <c-g>u<Esc>[s1z=`]a<c-g>u

let s:hidden_all = 0
function! ToggleHiddenAll()
	call ToggleModalHybridNumbers()
	if s:hidden_all  == 0
		let s:hidden_all = 1
		set noshowmode
		set noruler
		set laststatus=0
		set noshowcmd
		set signcolumn=no
	else
		let s:hidden_all = 0
		set showmode
		set ruler
		set laststatus=2
		set showcmd
		set signcolumn=auto
	endif
endfunction

nnoremap <silent> <A-S-z> :call ToggleHiddenAll()<CR>

function! NetrwMappings()
nmap <buffer> L <CR>
endfunction

" Buffer movement {{{
nnoremap <C-N> <Cmd>bprev<CR>
nnoremap <C-M> <Cmd>bnext<CR>

" Alt-hjkl for windows 
noremap <A-h> <C-w>h
noremap <A-j> <C-w>j
noremap <A-k> <C-w>k
noremap <A-l> <C-w>l
" TODO: Test for vim-tmux-navigator plugin, and then ...
call SetNavigationWithinTMUX()

" Alt-Shift-jl to create windows 
noremap <A-S-j> <Cmd>sp<CR>
noremap <A-S-l> <Cmd>vsp<CR>
"}}}

" Quick google lookup
nnoremap <leader>gg :silent !firefox -P devlookup -private -search "" &<Left><Left><Left>
"
" Fuzzy mappings{{{
nnoremap <leader>fh <Cmd>Helptags<CR>
nnoremap <leader>ff <Cmd>Files<CR>
nnoremap <leader>ft <Cmd>Rg<CR>
nnoremap <leader>fcs <Cmd>Colors<CR>
"}}}
" Output the hlgroups under the cursor https://vim.fandom.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor
noremap <F10> <Cmd>echom 'hi<' . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . '> lo<' . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . '>'<CR> 
"}}}
" Autocommands {{{
" TODO: augroup's
autocmd FileType cpp nnoremap <leader>c <Cmd>w<CR>:!clear && g++ -g -o %< % && ./%< <CR>

" Switching between relative and nonrelative numbers between insert and normal mode
function! ToggleModalHybridNumbers()
	if !exists('#ModalHybridNumbers#InsertEnter')
		set relativenumber number
		augroup ModalHybridNumbers
			autocmd!

			autocmd InsertEnter * :setlocal norelativenumber
			autocmd InsertLeave * :setlocal relativenumber
		augroup END
	else
		set norelativenumber nonumber
		augroup ModalHybridNumbers
			autocmd!
		augroup END
	endif
endfunction
call ToggleModalHybridNumbers()
call ToggleHiddenAll()

nnoremap <silent> <A-S-x> <Cmd>call ToggleModalHybridNumbers()<CR>

" netrw mappings {{{
augroup netrw_mapping
autocmd!
autocmd filetype netrw call NetrwMappings()
augroup END
" }}}

" Suposed to make a template file for all C++ files TODO: Move to specific plugin file (after/cpp.vim)
autocmd BufNewFile *.cpp 0r ~/.vim/templates/cpp.tpl

" Syntax highlighting in .rasi files (Rofi theme files)
autocmd BufNewFile,BufRead /*.rasi setf css
" Syntax highlighting in .mdx files (Markdown extended files)
autocmd BufNewFile,BufRead /*.mdx setf markdown

" Remove trailing whitespaces
" autocmd BufWritePre * :%s/\s\+$//e
"}}}
" User commands {{{
" TODO: Define sessions in a specified directory
" command Mksession mksession 
"}}}
"}}}
"       ▗               ▗▀▖▗    
"    ▌ ▌▄ ▛▚▀▖ ▞▀▖▞▀▖▛▀▖▐  ▄ ▞▀▌
"    ▐▐ ▐ ▌▐ ▌ ▌ ▖▌ ▌▌ ▌▜▀ ▐ ▚▄▌
"     ▘ ▀▘▘▝ ▘ ▝▀ ▝▀ ▘ ▘▐  ▀▘▗▄▘
" vim: set foldmethod=marker:
