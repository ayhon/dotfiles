snippet ayhon "The beginning of all c++ files" w
#include <iostream>

using namespace std;

int main (){
	$0

	return 0;
}
endsnippet

snippet { "Parentesis automatico"
{
	$1
}
$0
endsnippet

snippet ucppm "The beginning of all c++ files" w
#include <iostream>
using namespace std;

void resuelve_caso();
int main (){
	int ${1:num_casos};
	cin >> $1;
	while($1--) resuelve_caso();
	return 0;
}

void resuelve_caso(){
	$0
}
endsnippet

snippet for "The usual for instruction"
for (int ${1:i} = ${2:0}; $1 < ${3:num}; ${4:++$1}){
	$0
}
endsnippet

snippet while "The usual while instruction"
while(${1:condition}){
	$0
}
endsnippet

snippet if "The usual if instruction"
if(${1:condition}){
	$0
}
endsnippet
snippet else "The usual else instruction"
else {
	$0
}
endsnippet
snippet case "The usual case command"
case $1:
	$2
	break;
$0
endsnippet
snippet struct "The usual struct command"
struct t${1:Name} {
	$0
};
endsnippet

snippet casosIlimitados "Plantilla de Pita de casos ilimitados"
// Nombre del alumno: Fernando I. Leal
// Usuario del Juez FP2-DG19


#include <iostream>
#include <iomanip>
#include <fstream>



// función que resuelve el problema
TipoSolucion resolver(TipoDatos datos) {


}

// Resuelve un caso de prueba, leyendo de la entrada la
// configuración, y escribiendo la respuesta
bool resuelveCaso() {
    // leer los datos de la entrada

    if (! std::cin)
        return false;

    TipoSolucion sol = resolver(datos);

    // escribir sol


    return true;

}

int main() {
    // Para la entrada por fichero.
    // Comentar para acepta el reto
    #ifndef DOMJUDGE
     std::ifstream in("datos1.txt");
     auto cinbuf = std::cin.rdbuf(in.rdbuf()); //save old buf and redirect std::cin to casos.txt
     #endif


    while (resuelveCaso())
        ;


    // Para restablecer entrada. Comentar para acepta el reto
     #ifndef DOMJUDGE // para dejar todo como estaba al principio
     std::cin.rdbuf(cinbuf);
     system("PAUSE");
     #endif

    return 0;
}
endsnippet
